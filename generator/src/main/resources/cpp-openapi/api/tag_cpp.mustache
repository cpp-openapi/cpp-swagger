#include "{{classname}}.h"
#include "openapi/runtime/executor.h"

using namespace openapi;
// todo include str/json header

{{#operations}}

// class name {{classname}}

{{#operation}}

std::string const {{operationId}}Params::ContentType = "{{#consumes}}{{mediaType}}{{/consumes}}";
std::string const {{operationId}}Params::PathPattern = "{{path}}";
std::string const {{operationId}}Params::Method = "{{httpMethod}}";
void {{operationId}}Params::WriteParams(std::shared_ptr<IOASClientRequest> req) const
{
    req->SetHeaderParam("Content-Type", {{operationId}}Params::ContentType);
    req->SetMethod({{operationId}}Params::Method);
    req->SetPathPattern({{operationId}}Params::PathPattern);
{{#allParams}}
    if (this->{{paramName}}.has_value()){
        using V = remove_optional<decltype(this->{{paramName}})>::type;
        {{#isPathParam}}
        req->SetPathParam<V>("{{paramName}}", this->{{paramName}}.value());
        {{/isPathParam}}
        {{#isQueryParam}}
        req->SetQueryParam<V>("{{paramName}}", this->{{paramName}}.value());
        {{/isQueryParam}}
        {{#isBodyParam}}
        req->SetBodyParam(openapi::ToStdString(Json::Serialize(this->{{paramName}})));
        {{/isBodyParam}}
    }
{{/allParams}}
}

void {{operationId}}Response::ReadResponse(std::shared_ptr<IOASClientResponse> resp)
{
    this->code = resp->GetCode();
{{#returnType}}
    std::string strBody = resp->GetBody();
    if (strBody.size() == 0){
        return;
    }
    using U = typename remove_optional<decltype(this->payload)>::type;
    this->payload = Json::Deserialize<U>(openapi::StringT(strBody.c_str()));
{{/returnType}}
}

std::ostream& openapi::operator<<(std::ostream& os, const {{operationId}}Response& resp)
{
    openapi::string_t payloadStr{};
{{#returnType}}
    if(resp.payload.has_value())
    {
        payloadStr = Json::Serialize(resp.payload);
    }
{{/returnType}}
    os << "[" << resp.code << "]: " << openapi::ToStdString(payloadStr); // TODO: wstream?
    return os;
}
{{/operation}}


void {{classname}}Service::SetDefaultAuth(AuthInfoWriter auth)
{
    this->_auth = auth;
}

{{#operation}}
{{operationId}}Response {{classname}}Service::{{operationId}}({{operationId}}Params params){

    std::shared_ptr<IOASClientRequest> req = std::make_shared<ClientRequestImpl>();
    params.WriteParams(req);
    
    if (this->_auth)
    {
        // add auth
        this->_auth(req);
    }

    std::shared_future<std::shared_ptr<IOASClientResponse>> respFuture = this->_cli->Do(req).share();

    std::shared_ptr<std::promise<{{operationId}}Response>> p = std::make_shared<std::promise<{{operationId}}Response>>();

    Executor::GetInstance().Submit([p, respFuture]() {
        try
        {
            // get future response
            std::shared_ptr<IOASClientResponse> resp = respFuture.get();
            {{operationId}}Response result;
            result.ReadResponse(resp);
            p->set_value(result);
        }
        catch([[maybe_unused]] const std::exception &e)
        {
            try
            {
                p->set_exception(std::current_exception());
            } catch(...) {}
        }
    });
    return p->get_future().get();
}

{{/operation}}

{{/operations}}