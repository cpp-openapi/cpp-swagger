{{#models}}{{#model}}/*
 * {{classname}}.cpp
 *
 * {{description}}
 */

#include "{{classname}}.h"

using namespace openapi;

// macro should do the same job. Not really
// OPENAP_JSON_CONVERT_FUNCS({{classname}}{{#vars}}, {{baseName}}{{/vars}})

void {{classname}}::ToJSON(Json & j) const
{
    // OPENAPI_FOR_EACH(OPENAPI_TO_JSON_MEMBER, __VA_ARGS__)
    {{#vars}}
    j.AddMember<decltype(this->{{name}})>(openapi::StringT(OPENAPI_LITERAL({{baseName}})), this->{{name}});
    {{/vars}}
}

void {{classname}}::FromJSON(const Json & j)
{
    // OPENAPI_FOR_EACH(OPENAPI_FROM_JSON_MEMBER, __VA_ARGS__)
    {{#vars}}
    if(j.HasKey(openapi::StringT(OPENAPI_LITERAL({{baseName}}))))
    {
        using V = remove_optional<decltype(this->{{name}})>::type;
        this->{{name}} = j.GetMember<V>(openapi::StringT(OPENAPI_LITERAL({{baseName}})));
    }
    {{/vars}}
}

{{/model}}
{{/models}}